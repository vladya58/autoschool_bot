from create_bot import dp,bot,db
from db import Database
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
import datetime
import calendar
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from invoice.generate_send import Generate_invoice, Convert_and_send
import random
import math
from html import escape



async def les_menu(message: types.Message):
    
    await bot.delete_message(message.chat.id, message.message_id)
    
    keyboard_rec = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(text="–ó–∞–Ω—è—Ç–∏—è", callback_data="view_lessons")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    b2 = types.InlineKeyboardButton(text="–≠–∫–∑–∞–º–µ–Ω—ã", callback_data="view_exams")
    b4 = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")
    keyboard_rec.add(b1,b2,b4) 

    #PR —Å—é–¥–∞ –Ω—É–∂–Ω–æ —Ü–µ–Ω—É—é –∑–∞–Ω—è—Ç–∏—è.
    await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç.', reply_markup=keyboard_rec)#reply_markup=types.ReplyKeyboardRemove()


async def view_works(query: types.CallbackQuery):
    
    if "lessons" in query.data:   
        await query.message.delete()

        lessons_tr = db.get_lessons_tr(query.from_user.id)

        today = datetime.date.today()
        weekday_num = lessons_tr[0] 
        days_ahead = weekday_num - today.weekday() + (7 if weekday_num <= today.weekday() else 0)
        lessons_tr = ((today + datetime.timedelta(days_ahead),) + lessons_tr[1:],) if lessons_tr else ()

        
        lessons_pr = db.get_lessons_pr(query.from_user.id,datetime.datetime.now().date().strftime('%Y-%m-%d'))
        lessons = lessons_tr + tuple(lessons_pr)
        markup = types.InlineKeyboardMarkup(row_width=1)
        if len(lessons) !=0:
            lessons = sorted(lessons, key=lambda x: (x[0], x[1]))
            for i in range(len(lessons)):
                callback = f"work_{lessons[i][0]}_{lessons[i][1]}_{lessons[i][2]}_{lessons[i][3]}_{lessons[i][4]}_{lessons[i][5]}" 
                
                text = f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ {lessons[i][0]}  {lessons[i][1]}" if lessons[i][4] == 1 else f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ {lessons[i][0]}  {lessons[i][1]}" 
                markup.insert(types.InlineKeyboardButton(text, callback_data=callback))
            markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='view_back'))
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup)
        else:
            markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='view_back'))
            await query.message.answer('–ó–∞–Ω—è—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup)

    if "exams" in query.data:
        await query.message.delete()
        exams = db.get_exams_student(query.from_user.id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        if len(exams) !=0:

            
            for i in range(len(exams)):
                callback = f"work_ex_{exams[i][0]}_{exams[i][1]}_{exams[i][2]}_{exams[i][3]}" 
                
                text = f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω {exams[i][1]}" if exams[i][0] == 3 else f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω {exams[i][1]}" 
                markup.insert(types.InlineKeyboardButton(text, callback_data=callback))
            markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='view_back'))
            await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup)
        else:
            markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='view_back'))
            await query.message.answer('–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup)



    if "back" in query.data:
        await les_menu(query.message)

            
            
        
async def edit_works(query: types.CallbackQuery):

    if "ex" in query.data:
        lesson_type, date, name_inspector, id_exam = query.data.split('_')[2:]
        markup = types.InlineKeyboardMarkup(row_width=1)
        rules = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.'
        if datetime.date.today().strftime('%Y-%m-%d') < date:
            rules = '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.'
            markup.insert(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"return_exam_{id_exam}"))
        markup.insert(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_back"))

        if lesson_type == '3':
            msg = f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω\n–î–∞—Ç–∞ {date}\n\n–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä:\n{name_inspector}\n\n–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏—è:\n–ú–†–≠–û –ì–ò–ë–î–î \n\n\n {rules}'
        elif lesson_type == '4':
            msg = f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω\n–î–∞—Ç–∞ {date}\n\n–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä:\n{name_inspector}\n\n–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏—è:\n–£—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É. \n\n\n {rules}'
    else:
        date, time, id_teacher, id_class, lesson_type, id_practic = query.data.split('_')[1:]
        markup = types.InlineKeyboardMarkup(row_width=1)
        rules = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.'
        if lesson_type == '1':
            info_teacher, info_class = db.get_ihfoles(id_teacher, id_class)
            if datetime.date.today().strftime('%Y-%m-%d') < date:
                rules = '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.'
                markup.insert(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data=f"return_lesson_{id_practic}"))
            msg = f'–í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:\n–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n–î–∞—Ç–∞ {date}      –í—Ä–µ–º—è {time} \n\n–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:\n{info_teacher[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω:   +{info_teacher[1]}\nemail:   {info_teacher[2]} \n\n –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏—è:\n{info_class[0]} {info_class[1]} \n\n\n {rules}'
        elif lesson_type == '2':
            info_teacher, info_class = db.get_ihfoles(id_teacher, id_class)
            msg = f'–í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:\n–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n–î–∞—Ç–∞ {date}      –í—Ä–µ–º—è {time} \n\n–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:\n{info_teacher[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω:   +{info_teacher[1]}\nemail:   {info_teacher[2]} \n\n –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏—è:\n{info_class[0]} –∫–∞–±.{info_class[1]} \n\n\n {rules}'
        markup.insert(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_back"))
    await query.message.answer(msg, reply_markup=markup)
    

            

async def return_works(query: types.CallbackQuery):

    if "exam" in query.data:
        db.del_exam(query.data.split('_')[-1])
        await query.answer(text="–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",show_alert=True)
        await les_menu(query.message)



    
    if "lesson" in query.data:
        db.del_lesson(query.data.split('_')[-1])
        db.update_balance(query.from_user.id, 500)
        number = random.randint(1, 1000)
        data = db.get_full_data(query.from_user.id)
        now = datetime.datetime.now()
        try:

            Generate_invoice("test.html",f'invoice_return{number}{query.from_user.id}.html',number, data[2], query.from_user.id,
                      data[5], "000012345",data[1],'4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã', f'{now.date()} {now.time()}', '–í–æ–∑–≤—Ä–∞—Ç', 
                      '–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –∑–∞–Ω—è—Ç–∏–µ.', 500, "–í–æ–∑–≤—Ä–∞—Ç", data[8] )
        except:
            print(f"–ß–µ–∫ –Ω–æ–º–µ—Ä {number} –Ω–µ —Å–æ–∑–¥–∞–Ω. –û—à–∏–±–∫–∞!")


    
        try:
            Convert_and_send(f'invoice_return{number}{query.from_user.id}.html', f'invoice_return{number}{query.from_user.id}.pdf',data[5] )

        
        except:
            print(f"–ß–µ–∫ –Ω–æ–º–µ—Ä {number} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—à–∏–±–∫–∞!")


        await query.answer(text="–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å.",show_alert=True)
        await les_menu(query.message)








        

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(les_menu, lambda message: message.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º" )
    dp.register_callback_query_handler(view_works, lambda query: query.data.startswith('view_'))
    dp.register_callback_query_handler(edit_works, lambda query: query.data.startswith('work_'))
    dp.register_callback_query_handler(return_works, lambda query: query.data.startswith('return_'))
