from create_bot import dp,bot,db
from db import Database
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
import datetime
import calendar
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup


class UserRec(StatesGroup):
    date = State()
    time = State()


#@dp.message_handler(lambda message: message.text == "üöò –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ")
async def rec_menu(message: types.Message):
    
    await bot.delete_message(message.chat.id, message.message_id)
    
    keyboard_rec = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(text="–ó–∞–Ω—è—Ç–∏–µ", callback_data="lesson")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    b2 = types.InlineKeyboardButton(text="–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω", callback_data="t_exam")
    b3 = types.InlineKeyboardButton(text="–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω", callback_data="p_exam")
    b4 = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")
    

    keyboard_rec.add(b1,b2,b3,b4) 


    await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n\n –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –æ–±—É—á–µ–Ω–∏—è.\n\n–î–Ω–∏ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ú–†–≠–û –ì–ò–ë–î–î —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –æ–±—ã—á–Ω–æ 2 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–∏—Ö –¥–Ω–µ–π. \n\n\n–û–ø–ª–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ú–†–≠–û –ì–ò–ë–î–î. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –º–µ–¥. —Å–ø—Ä–∞–≤–∫—É, –ø–∞—Å–ø–æ—Ä—Ç –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ê–≤—Ç–æ—à–∫–æ–ª—ã.', reply_markup=keyboard_rec)#reply_markup=types.ReplyKeyboardRemove()


async def rec(callback: types.CallbackQuery, state: FSMContext):
    lesson = False
    t_exam = False
    p_exam = False
   
    if callback.data == "lesson":
        lesson = True
        await callback.message.delete()
        await bot.answer_callback_query(callback.id)
        await show_calendar(lesson, t_exam, p_exam, callback.message.chat.id)


    elif callback.data == "t_exam":
        t_exam = True
        await callback.message.delete()
        await bot.answer_callback_query(callback.id)
        await exams(lesson, t_exam, p_exam, callback.message.chat.id)
        
    elif callback.data == "p_exam":
        p_exam = True
        await callback.message.delete()
        await bot.answer_callback_query(callback.id)
        await exams(lesson, t_exam, p_exam, callback.message.chat.id)
        
    elif callback.data == "back_to_rec":
        await rec_menu(callback.message)
        


async def exams(lesson, t_exam, p_exam,chat_id: int):
    if t_exam:
        date_array = db.show_date_exam(3, datetime.date.today())                   
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in range(len(date_array)):
            count_st = db.show_count_slots(date_array[i][0])
            date_str = date_array[i][1].strftime("%Y-%m-%d")
            callback_data = f"rec- t_exam -{date_str}"
            button_text = f"{date_str}, –û—Å—Ç–∞–ª–æ—Å—å {date_array[i][2]-len(count_st)} –∏–∑ {date_array[i][2]} –º–µ—Å—Ç"
            markup.insert(types.InlineKeyboardButton(button_text, callback_data=callback_data))

        markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_rec"))
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–æ—Äe—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. –ù–∞–∂–∏–º–∞—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=markup)
    if p_exam:
        date_array = db.show_date_exam(4, datetime.date.today())                   
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i in range(len(date_array)):
            count_st = db.show_count_slots(date_array[i][0])
            date_str = date_array[i][1].strftime("%Y-%m-%d")
            callback_data = f"rec- p_exam -{date_str}"
            button_text = f"{date_str}, –û—Å—Ç–∞–ª–æ—Å—å {date_array[i][2]-len(count_st)} –∏–∑ {date_array[i][2]} –º–µ—Å—Ç"
            markup.insert(types.InlineKeyboardButton(button_text, callback_data=callback_data))

        markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_rec"))
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. –ù–∞–∂–∏–º–∞—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=markup)
    

async def show_calendar(lesson, t_exam, p_exam,chat_id: int):
    markup = create_calendar(lesson, t_exam, p_exam)
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=markup)

def create_calendar(lesson, t_exam, p_exam, year=None, month=None):
    now = datetime.datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    markup = types.InlineKeyboardMarkup(row_width=7)
    month_names = ("–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å")
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Å—è—Ü –∏ –≥–æ–¥
    row = [types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"calendar-prev-month-{year}-{month}-{lesson}-{t_exam}-{p_exam}"),
           types.InlineKeyboardButton(month_names[month - 1] + " " + str(year), callback_data="ignore"),
           types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"calendar-next-month-{year}-{month}-{lesson}-{t_exam}-{p_exam}")]
    markup.row(*row)
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å")
    row = [types.InlineKeyboardButton(day, callback_data="ignore") for day in week_days]
    markup.row(*row)
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                
                row.append(types.InlineKeyboardButton(str(day), callback_data=f"calendar-day lesson -{month}-{day}"))
                
        
        markup.row(*row)
    return markup


async def calendar_prev_month_callback(query):
    lesson, t_exam, p_exam = query.data.split('-')[5:8]
    year, month = map(int, query.data.split('-')[3:5])
    prev_month = month - 1
    prev_year = year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    await bot.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                  reply_markup=create_calendar(lesson, t_exam, p_exam,prev_year, prev_month))



async def calendar_next_month_callback(query):
    lesson, t_exam, p_exam = query.data.split('-')[5:8]
    year, month = map(int, query.data.split('-')[3:5])
    next_month = month + 1
    next_year = year
    if next_month == 13:
        next_month = 1
        next_year += 1
    await bot.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=create_calendar(lesson, t_exam, p_exam,next_year, next_month))

async def show_time_picker(user_id: int, message_id: int, chat_id: int, selected_day: int,selected_month:int):
    await bot.delete_message(chat_id,message_id)
    time_array = db.check_table(user_id, selected_month,selected_day)
    for i in range(len(time_array)):
        time_array[i] = time_array[i][0].strftime("%H:%M")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.datetime.now()
    markup = types.InlineKeyboardMarkup(row_width=2)
    for hour in range(8, 19):
        if hour != 12:
            time_str = f"{hour:02}:00"
            callback_data = f"lesson-time-2023-{selected_month}-{selected_day}-{time_str}"
            if time_str not in time_array and datetime.datetime.strptime(callback_data, "lesson-time-%Y-%m-%d-%H:%M") > datetime.datetime.combine(now.date(), now.time()) and datetime.datetime.strptime(callback_data, "lesson-time-%Y-%m-%d-%H:%M").weekday() in [1,2,3,4]:
                button_text = time_str
                markup.insert(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            else:
                button_text = time_str
                button_text = f"{time_str} (–∑–∞–Ω—è—Ç–æ)" if time_str in time_array else button_text
                button_text = f"{time_str} (—É–∂–µ –ø—Ä–æ—à–ª–æ)" if datetime.datetime.strptime(callback_data, "lesson-time-%Y-%m-%d-%H:%M") < datetime.datetime.combine(now.date(), now.time()) else button_text
                button_text = f"{time_str} (–≤—ã—Ö–æ–¥–Ω–æ–π)" if datetime.datetime.strptime(callback_data, "lesson-time-%Y-%m-%d-%H:%M").weekday() in [5,6] else button_text
            
                callback_data = callback_data + " –∑–∞–Ω—è—Ç–æ" if "(–∑–∞–Ω—è—Ç–æ)" in button_text else callback_data
                callback_data = callback_data + " –≤—ã—Ö–æ–¥–Ω–æ–π" if "(–≤—ã—Ö–æ–¥–Ω–æ–π)" in button_text else callback_data
                callback_data = callback_data + " –ø—Ä–æ—à–ª–æ" if "–ø—Ä–æ—à–ª–æ" in button_text else callback_data  
                markup.insert(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        else:
            pass
    markup.insert(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_rec"))
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)

async def process_lesson_callback(callback_data: types.CallbackQuery):
    if "–ø—Ä–æ—à–ª–æ" in callback_data.data:
        keyboard = types.InlineKeyboardMarkup()
    
        b2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_rec")
        selected_year_str,selected_month_str,selected_day_str, selected_time_str = callback_data.data.split('-')[2:]
        keyboard.add(b2) 
        await callback_data.message.delete()

        await callback_data.message.answer ('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—à–ª–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!', reply_markup=keyboard)
    if "–≤—ã—Ö–æ–¥–Ω–æ–π" in  callback_data.data:
        keyboard = types.InlineKeyboardMarkup()
    
        b2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_rec")
        selected_year_str,selected_month_str,selected_day_str, selected_time_str = callback_data.data.split('-')[2:]
        keyboard.add(b2) 
        await callback_data.message.delete()

        await callback_data.message.answer ('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!', reply_markup=keyboard)
    
    if "–∑–∞–Ω—è—Ç–æ" in callback_data.data:
        keyboard = types.InlineKeyboardMarkup()
    
        b2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_rec")
        selected_year_str,selected_month_str,selected_day_str, selected_time_str = callback_data.data.split('-')[2:]
        keyboard.add(b2) 
        await callback_data.message.delete()

        await callback_data.message.answer ('–≠—Ç–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!', reply_markup=keyboard)

    else:


        selected_year_str,selected_month_str,selected_day_str, selected_time_str = callback_data.data.split('-')[2:]
        keyboard = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"rec- lesson -{selected_year_str}-{selected_month_str}-{selected_day_str}-{selected_time_str}")
        b2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_rec")
        
        keyboard.add(b1,b2) 

        await callback_data.message.delete()

        await callback_data.message.answer (f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å:–ì–æ–¥ {selected_year_str} –î–µ–Ω—å {selected_day_str},–ú–µ—Å—è—Ü {selected_month_str}, –í—Ä–µ–º—è {selected_time_str}', reply_markup=keyboard)
    


async def process_calendar_day(callback_query: types.CallbackQuery):
    selected_month,selected_day = callback_query.data.split('-')[2:]
    await show_time_picker(callback_query.from_user.id,callback_query.message.message_id,callback_query.message.chat.id, selected_day,selected_month)
    
    

async def recover(callback_query: types.CallbackQuery):
    if "lesson" in callback_query.data:
        selected_year_str,selected_month_str,selected_day_str, selected_time_str = callback_query.data.split('-')[2:]
        db.rec_lesson(callback_query.from_user.id, f"{selected_year_str}-{selected_month_str}-{selected_day_str}",f"{selected_time_str}")
        await callback_query.answer(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await rec_menu(callback_query.message)    
    if "t_exam" in callback_query.data:
        selected_year_str,selected_month_str,selected_day_str = callback_query.data.split('-')[2:]
        try:
            db.rec_exam( callback_query.from_user.id,f"{selected_year_str}-{selected_month_str}-{selected_day_str}", 3)
            await callback_query.answer(text="–ó–∞–ø–∏—Å—å –Ω–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            await rec_menu(callback_query.message)       
        except:
            await callback_query.answer(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ —É–¥–∞–ª–æ—Å—å. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã –±—É–¥–µ—Ç–µ –≤–æ–∑—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏.",show_alert=True)
            await rec_menu(callback_query.message)

    if "p_exam" in callback_query.data:
        selected_year_str,selected_month_str,selected_day_str = callback_query.data.split('-')[2:]
        try:

            db.rec_exam( callback_query.from_user.id,f"{selected_year_str}-{selected_month_str}-{selected_day_str}", 4)
            await callback_query.answer(text="–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            await rec_menu(callback_query.message)
        
        except:
            await callback_query.answer(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ —É–¥–∞–ª–æ—Å—å. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã –±—É–¥–µ—Ç–µ –≤–æ–∑—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏.",show_alert=True)
            await rec_menu(callback_query.message)
        
        

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(rec_menu, lambda message: message.text == "üöò –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ" )
    dp.register_callback_query_handler(rec, lambda callback: callback.data in ["lesson","t_exam","p_exam","back_to_rec"] )
    dp.register_callback_query_handler(recover, lambda query: query.data.startswith('rec'))
    
    dp.register_callback_query_handler(calendar_next_month_callback, lambda query: query.data.startswith('calendar-next-month'))
    dp.register_callback_query_handler(calendar_prev_month_callback, lambda query: query.data.startswith('calendar-prev-month'))

    dp.register_callback_query_handler(process_calendar_day, lambda c: c.data.startswith('calendar-day'))
    dp.register_callback_query_handler(process_lesson_callback, lambda c: c.data.startswith('lesson-time-'))
   