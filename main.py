# C–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
# @dispatcher.callback_query_handler(lambda call: "<CALLBACK>" in call.data)
# async def next_keyboard(call):

#     await call.message.edit_reply_markup(<YOUR KEYBOARD>)

#6132924794:AAEGdkuvbN_lOCnlThLVFHCPwvNKafdgmic
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import logging
from typing import Union
from db import Database
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import time

class UserState(StatesGroup):
    name = State()
    pasport = State()
    medical = State()
    email = State()
    age = State()


    
class lkState(StatesGroup):
    lk = State()
    reg_data = State()
    edit_data = State()
    view_data = State()
    exam = State()
    history_balance = State()


db = Database('C:\pybot\db.db')

Rules = True
status = '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
first_name = "User"
balance = 0

bot = Bot(token='6132924794:AAEGdkuvbN_lOCnlThLVFHCPwvNKafdgmic')
dp = Dispatcher(bot,storage=MemoryStorage())

 #message.answer(text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True) 


            


@dp.message_handler(commands=['start']) #–Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º. 
async def cmd_start(message: types.Message):
    if (not db.user_exists(message.from_user.id)):
         
        keyboard = types.ReplyKeyboardMarkup()
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        cancel_phone = types.KeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
        keyboard.add(button_phone,cancel_phone)
        await message.answer("–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",reply_markup=keyboard)
    else:
        await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu') #message.answer(text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True) 
    


@dp.message_handler(content_types=types.ContentType.CONTACT) #–ï—â–µ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
async def get_auto(message: types.Message, state: FSMContext):
    if db.phone_exists(message.contact.phone_number.replace("+", "")):
        db.set_user_id(message.contact.user_id,message.contact.phone_number.replace("+", ""))

        await message.answer(f"–¢–≤–æ–π –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /menu.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä 8 800 555 3535", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(Text(equals="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"))
@dp.message_handler(commands=['menu']) #–Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º. 
async def cmd_menu(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id-1)
    await bot.delete_message(message.chat.id, message.message_id)
    if ( db.user_exists(message.from_user.id)):
        
    
        buttons_menu = types.ReplyKeyboardMarkup()
        button_1 = types.KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        button_2 = 'üöò –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ'
        button_3 = 'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π'
        button_4 = 'üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
        button_5 = '‚úÖ –ü—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω –ü–î–î'
        button_6 = '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞.'
        button_7 = '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.'
        buttons_menu.add(button_1,button_2,button_3, button_4, button_5, button_6, button_7)
        await message.answer("{0.first_name}, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.".format(message.from_user), reply_markup=buttons_menu)
    else:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=types.ReplyKeyboardRemove())

@dp.callback_query_handler(lambda callback: callback.data in ["back_to_lk"])
async def with_puree(callback: Union[types.CallbackQuery,types.Message],state: FSMContext):
    await callback.message.delete()
    keyboard_lk = types.InlineKeyboardMarkup()
    lk_b1 = types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="log in")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    lk_b2 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="view_data")
    lk_b3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")
    lk_b4 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="ex_mars")
    lk_b5 = types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="history_balance")
    lk_b6 = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="/menu")

    keyboard_lk.add(lk_b1,lk_b2,lk_b3,lk_b4,lk_b5,lk_b6) if db.get_full(callback.from_user.id) == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" else keyboard_lk.add(lk_b2,lk_b3,lk_b4,lk_b5,lk_b6)

    
    await callback.message.answer(f'üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§:\n–ù–∏–∫–Ω–µ–π–º {first_name}!\n–°—Ç–∞—Ç—É—Å: {db.get_full(callback.from_user.id)}\n–ë–∞–ª–∞–Ω—Å: {balance}', reply_markup=keyboard_lk)#reply_markup=types.ReplyKeyboardRemove()

# from aiogram.dispatcher.filters import Text
@dp.message_handler(Text(equals="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
async def with_puree(message: Union[types.Message,types.CallbackQuery], state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id-1)
    await bot.delete_message(message.chat.id, message.message_id)
    
    keyboard_lk = types.InlineKeyboardMarkup()
    lk_b1 = types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="log in")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    lk_b2 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="view_data")
    lk_b3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")
    lk_b4 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="ex_mars")
    lk_b5 = types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="history_balance")
    lk_b6 = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="/menu")
    

    keyboard_lk.add(lk_b1,lk_b2,lk_b3,lk_b4,lk_b5,lk_b6) if db.get_full(message.from_user.id) == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" else keyboard_lk.add(lk_b2,lk_b3,lk_b4,lk_b5,lk_b6)


    await message.answer(f'üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§:\n–ù–∏–∫–Ω–µ–π–º {first_name}!\n–°—Ç–∞—Ç—É—Å: {db.get_full(message.from_user.id)}\n–ë–∞–ª–∞–Ω—Å: {balance}', reply_markup=keyboard_lk)#reply_markup=types.ReplyKeyboardRemove()



@dp.callback_query_handler(lambda callback: callback.data in ["log in", "view_data"])
async def auto(callback: types.CallbackQuery):
    if callback.data == "log in":
        await callback.message.delete()
        lst_data = db.get_data(callback.from_user.id)
        keyboard_reg = types.InlineKeyboardMarkup()
        reg_b1 = types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –§–ò–û", callback_data="set_name")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
        reg_b2 = types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç", callback_data="set_pasport")
        reg_b3 = types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –º–µ–¥—Å–ø—Ä–∞–≤–∫—É", callback_data="set_medical")
        reg_b4 = types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —ç–ª. –ø–æ—á—Ç—É", callback_data="set_email")
        reg_b5 = types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="set_age")
        reg_b6 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_lk")
        lst_key = [reg_b1,reg_b2,reg_b3,reg_b4,reg_b5]
        for i in range(len(lst_data)-1,-1,-1):
            if lst_data[i] == None or lst_data[i] == "":
                pass
            else:
                lst_key.pop(i)
        if len(lst_key) !=0:
            keyboard_reg.add(*lst_key,reg_b6) 
            await callback.message.answer('–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å?',reply_markup=keyboard_reg)
        else:
            db.set_full(callback.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            await callback.message.answer('–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –ø–æ–ª—è. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu',reply_markup=keyboard_reg)

   
    if callback.data == "view_data":
        await callback.message.delete()
        lst_full_data = db.get_full_data(callback.from_user.id)
        keyboard_reg = types.InlineKeyboardMarkup()
        reg_b1 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_lk")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    
    
        keyboard_reg.add(reg_b1) 
        await callback.message.answer(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–õ–æ–≥–∏–Ω {lst_full_data[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω +{lst_full_data[1]}\n–ò–º—è {lst_full_data[2]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {lst_full_data[3]}\n–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ {lst_full_data[4]}\n–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å {lst_full_data[5]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {lst_full_data[6]}\n–ì—Ä—É–ø–ø–∞ {lst_full_data[7]}\n',reply_markup=keyboard_reg)
        
    # if Rules:
    
    #     await call.answer(text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", show_alert=True) #–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ







@dp.callback_query_handler(text="set_name")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.')
    await UserState.name.set()

@dp.callback_query_handler(text="set_pasport")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1234 56789123.')
    await UserState.pasport.set()


@dp.callback_query_handler(text="set_medical")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –º–µ–¥—Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 00 1234567.')
    await UserState.medical.set()

@dp.callback_query_handler(text="set_email")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.')
    await UserState.email.set()

@dp.callback_query_handler(text="set_age")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1900.')
    await UserState.age.set()

    
@dp.message_handler(state=UserState.name,content_types=types.ContentTypes.TEXT)
async def set_name(message: types.Message, state: FSMContext,call = "set_name"):
    await bot.delete_message(message.chat.id, message.message_id-1)
    await bot.delete_message(message.chat.id, message.message_id)
    keyboard_reg = types.InlineKeyboardMarkup()
    reg_b1 = types.InlineKeyboardButton(text="–î–∞", callback_data="log in")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    reg_b2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=call)
    keyboard_reg.add(reg_b1,reg_b2)
    db.set_name(message.from_user.id, message.text)
    await state.finish()
    await message.answer(f'–í—ã —É–∫–∞–∑–∞–ª–∏ {message.text}.–í–µ—Ä–Ω–æ?',reply_markup=keyboard_reg) 

@dp.message_handler(state=UserState.pasport,content_types=types.ContentTypes.TEXT)
async def set_pasport(message: types.Message, state: FSMContext,call = "set_pasport"):
    await bot.delete_message(message.chat.id, message.message_id-1)
    await bot.delete_message(message.chat.id, message.message_id)
    keyboard_reg = types.InlineKeyboardMarkup()
    reg_b1 = types.InlineKeyboardButton(text="–î–∞", callback_data="log in")#types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="log in")
    reg_b2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=call)
    keyboard_reg.add(reg_b1,reg_b2)
    db.set_pasport(message.from_user.id, message.text)
    await state.finish()
    await message.answer(f'–í—ã —É–∫–∞–∑–∞–ª–∏ {message.text}.–í–µ—Ä–Ω–æ?',reply_markup=keyboard_reg)
    
          

    


    



    


@dp.message_handler(state=lkState.lk,content_types=types.ContentTypes.TEXT)
async def bot_message(message: types.Message):
    await message.reply("–ù–µ –ø–æ–Ω—è–ª", reply_markup=types.ReplyKeyboardRemove())

    
# @dp.message_handler() 

    





@dp.message_handler(lambda message: message.text == "üöò –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())








@dp.message_handler() #–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
async def echo(message: types.Message): #–°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
   await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu')





if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)






# import telebot
# from telebot import apihelper



# token = '6132924794:AAEGdkuvbN_lOCnlThLVFHCPwvNKafdgmic'

# bot = telebot.TeleBot(token)




# @bot.message_handler(content_types=['text'])
# def send_text(message):
#    


        
#     elif message.text == 'üöò –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ':
#         markup2 = telebot.types.InlineKeyboardMarkup()
#         rec = telebot.types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å—å', callback_data=5)
#         cancel = telebot.types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=6)
        
#         markup2.add(rec, cancel)
#         bot.send_message(message.chat.id, f'{first_name}, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å!',reply_markup=markup2) #.format(message.from_user)





#     elif message.text == 'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π':
#         markup3 = telebot.types.InlineKeyboardMarkup()
#         teori = telebot.types.InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏', callback_data=7)
#         practic = telebot.types.InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', callback_data=8)      
#         markup3.add(teori, practic)
#         bot.send_message(message.chat.id, f'{first_name}, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π!',reply_markup=markup3) #.format(message.from_user)




#     elif message.text == 'üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
#         markup4 = telebot.types.InlineKeyboardMarkup()
#         replen = telebot.types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=9)
#         retur = telebot.types.InlineKeyboardButton(text='–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', callback_data=10)
#         markup4.add(replen, retur)
#         bot.send_message(message.chat.id, f'{first_name}, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º!',reply_markup=markup4)




#     elif message.text == '‚úÖ –ü—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω –ü–î–î':
#         markup5 = telebot.types.InlineKeyboardMarkup()
#         start_ekz = telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data=11)
#         info_ekz = telebot.types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data=12)
#         markup5.add(start_ekz, info_ekz)
#         bot.send_message(message.chat.id, f'{first_name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ–∏ —Å–∏–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º —ç–∫–∑–∞–º–µ–Ω–µ!',reply_markup=markup5)





#     elif message.text == '‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞.':
#         bot.send_message(message.chat.id, '–ü–æ–∫–∞!')





#     elif message.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.':
#         bot.send_message(message.chat.id, '–ü–æ–∫–∞!')

#     else:
#         bot.send_message(message.chat.id, '–£–≤—ã, —è –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start')


# # @bot.message_handler(commands=['start'])
# # def start_message(message):
# #     keyboard = telebot.types.ReplyKeyboardMarkup(True)
# #     keyboard.row('–ü—Ä–∏–≤–µ—Ç', '–ü–æ–∫–∞')
# #     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=keyboard)

# # @bot.message_handler(commands=['test'])
# # def start_message(message):
# #     markup = telebot.types.InlineKeyboardMarkup()
# #     markup.add(telebot.types.InlineKeyboardButton(text='–¢—Ä–∏', callback_data=3))
# #     markup.add(telebot.types.InlineKeyboardButton(text='–ß–µ—Ç—ã—Ä–µ', callback_data=4))
# #     markup.add(telebot.types.InlineKeyboardButton(text='–ü—è—Ç—å', callback_data=5))
# #     bot.send_message(message.chat.id, text="–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –±—ã–ª–∞ —É –í–∞—Å –≤ —à–∫–æ–ª–µ?", reply_markup=markup)
# # @bot.message_handler(content_types=['text'])
# # def send_text(message):
# #     if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
# #         bot.send_message(message.chat.id, '–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç!')
# #     elif message.text.lower() == '–ø–æ–∫–∞':
# #         bot.send_message(message.chat.id, '–ü–æ–∫–∞!')

# # @bot.callback_query_handler(func=lambda call: True)
# # def query_handler(call):

# #     bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!')
# #     answer = ''
# #     if call.data == '3':
# #         answer = '–í—ã —Ç—Ä–æ–µ—á–Ω–∏–∫!'
# #     elif call.data == '4':
# #         answer = '–í—ã —Ö–æ—Ä–æ—à–∏—Å—Ç!'
# #     elif call.data == '5':
# #         answer = '–í—ã –æ—Ç–ª–∏—á–Ω–∏–∫!'

# #     bot.send_message(call.message.chat.id, answer)
# #     bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

# bot.polling()

